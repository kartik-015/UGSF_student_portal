# Software Requirements Specification (SRS)
## Student Portal - Charusat University

**Version:** 1.0  
**Date:** January 2025  
**Status:** Production Ready

---

## Table of Contents

1. Introduction
2. Overall Description
3. System Features
4. External Interface Requirements
5. System Architecture
6. Database Design
7. Security Requirements
8. Performance Requirements
9. Design Constraints
10. Project Status & Deliverables

---

## 1. Introduction

### 1.1 Purpose
This Software Requirements Specification (SRS) document describes the complete requirements for the Student Portal system developed for Charusat University. The system is a comprehensive full-stack student management portal designed to streamline academic processes, enhance communication, and provide role-based access to various stakeholders including students, faculty, administrators, and counselors.

### 1.2 Scope
The Student Portal encompasses:
- Student registration and onboarding
- Academic information management
- Assignment submission and grading
- Project group management
- Real-time notifications
- Progress tracking and reporting
- Role-based dashboard access
- File management and storage

### 1.3 Intended Audience
- University administrators
- Faculty members
- Students
- Counselors
- HODs (Head of Departments)
- Development team
- Quality assurance team

### 1.4 Product Overview
The system is built as a modern web application using Next.js 14, MongoDB, and Tailwind CSS, featuring real-time capabilities through Socket.io and secure file storage via Cloudinary.

---

## 2. Overall Description

### 2.1 Product Perspective
The Student Portal is a standalone web application that integrates with existing university systems through API endpoints. It serves as a centralized platform for academic management with role-based access control.

### 2.2 Product Functions
- **User Management**: Registration, authentication, and role-based access
- **Academic Management**: Course enrollment, assignment management, grading
- **Project Management**: Software project group creation and management
- **Communication**: Real-time notifications and messaging
- **Reporting**: Progress reports and academic analytics
- **File Management**: Secure file upload and storage

### 2.3 User Classes and Characteristics

| User Type | Permissions | Key Features |
|-----------|-------------|--------------|
| **Student** | View subjects, submit assignments, track grades | Academic dashboard, assignment submission, progress tracking |
| **Admin** | Full system access | User management, system configuration, analytics |
| **Faculty** | Create assignments, grade submissions | Assignment management, student performance tracking |
| **Counselor** | View assigned students, track progress | Student counseling, progress reports |
| **HOD** | Department oversight | Project approval, guide assignment |

### 2.4 Operating Environment
- **Server**: Node.js 18+
- **Database**: MongoDB (local or Atlas)
- **File Storage**: Cloudinary
- **Browser Support**: Chrome, Firefox, Safari, Edge
- **Mobile Support**: Responsive design for mobile devices

---

## 3. System Features

### 3.1 User Authentication & Authorization
**Feature ID:** F-001  
**Description:** Secure user authentication with role-based access control  
**Priority:** High  
**Status:** ✅ Complete

**Requirements:**
- Email-based authentication using college email format
- Password hashing using bcrypt
- JWT token-based sessions
- Role-based access control (RBAC)
- Password reset functionality

**Email Format Validation:**
- Pattern: `[YY][DEPT][XXX]@charusat.edu.in`
- Example: `23DIT015@charusat.edu.in`
- Extracts: Year (23), Department (DIT), Roll Number (015)

### 3.2 Student Dashboard
**Feature ID:** F-002  
**Description:** Comprehensive student dashboard with academic information  
**Priority:** High  
**Status:** ✅ Complete

**Components:**
- Academic information display
- Enrolled subjects overview
- Assignment status tracking
- Grade visualization
- Progress reports
- Timetable access

### 3.3 Assignment Management
**Feature ID:** F-003  
**Description:** Complete assignment lifecycle management  
**Priority:** High  
**Status:** ✅ Complete

**Features:**
- Assignment creation (Faculty)
- Assignment submission (Student)
- Grading and feedback (Faculty)
- File attachments support
- Due date tracking
- Submission status tracking

### 3.4 Project Group Management
**Feature ID:** F-004  
**Description:** Software project group creation and management  
**Priority:** Medium  
**Status:** ✅ Complete

**Features:**
- Group creation with auto-generated unique ID
- Member management
- Project title and description
- Domain specification
- Guide assignment (Internal/External)
- HOD approval workflow
- Weekly progress reports

### 3.5 Real-time Notifications
**Feature ID:** F-005  
**Description:** Real-time notifications for system events  
**Priority:** Medium  
**Status:** ✅ Complete

**Notification Types:**
- New assignments
- Grade updates
- Project approvals
- System announcements
- Deadline reminders

### 3.6 File Management
**Feature ID:** F-006  
**Description:** Secure file upload and storage  
**Priority:** Medium  
**Status:** ✅ Complete

**Features:**
- Cloudinary integration
- Multiple file type support
- Automatic file optimization
- Secure file access
- File versioning

### 3.7 Reporting System
**Feature ID:** F-007  
**Description:** Progress reports and analytics  
**Priority:** Medium  
**Status:** ✅ Complete

**Reports:**
- Student progress reports
- Assignment analytics
- Project group reports
- System usage statistics
- PDF export functionality

---

## 4. External Interface Requirements

### 4.1 User Interfaces
- **Web Application**: Responsive web interface
- **Mobile Support**: Mobile-responsive design
- **Accessibility**: WCAG 2.1 compliance

### 4.2 Hardware Interfaces
- **Server Requirements**: Standard web server
- **Client Requirements**: Modern web browser
- **Storage**: Cloud-based file storage

### 4.3 Software Interfaces
- **Database**: MongoDB
- **File Storage**: Cloudinary
- **Authentication**: NextAuth.js
- **Real-time**: Socket.io
- **Email**: SMTP integration

### 4.4 Communication Interfaces
- **HTTP/HTTPS**: RESTful API
- **WebSocket**: Real-time notifications
- **Email**: Transactional emails

---

## 5. System Architecture

### 5.1 High-Level Architecture
```
┌─────────────────────────────────────────────────────────────┐
│                        Client Layer                          │
│  ┌─────────────┐  ┌─────────────┐  ┌─────────────┐        │
│  │   Web App   │  │   Mobile    │  │   Tablet    │        │
│  └─────────────┘  └─────────────┘  └─────────────┘        │
└─────────────────────────────────────────────────────────────┘
                              │
┌─────────────────────────────────────────────────────────────┐
│                      API Gateway                             │
│                    Next.js API Routes                      │
└─────────────────────────────────────────────────────────────┘
                              │
┌─────────────────────────────────────────────────────────────┐
│                    Business Logic Layer                    │
│  ┌─────────────┐  ┌─────────────┐  ┌─────────────┐        │
│  │  Controllers│  │   Services  │  │  Validators │        │
│  └─────────────┘  └─────────────┘  └─────────────┘        │
└─────────────────────────────────────────────────────────────┘
                             I have gathered comprehensive information about the project from the README, key models, server setup, package.json, and project status report. This includes:

- Project overview, features, and tech stack
- User and ProjectGroup data models
- Server and real-time notification setup
- Dependencies and scripts
- Current project status and readiness for production

Plan for SRS document generation:

1. Introduction
   - Project purpose and scope
   - Overview of the student portal system

2. Overall Description
   - Product perspective and features summary
   - User roles and access control
   - Technologies used

3. System Features
   - Authentication and authorization
   - Student features
   - Admin features
   - Counselor features
   - Faculty features
   - Software project groups management
   - Real-time notifications
   - File upload and PDF generation

4. External Interface Requirements
   - User interface (brief overview)
   - API endpoints summary

5. System Architecture
   - Backend architecture (Next.js API routes, MongoDB)
   - Frontend architecture (Next.js, React, Tailwind CSS)
   - Real-time communication (Socket.io)

6. Data Model
   - User model details
   - ProjectGroup model details
   - Other key models summary

7. Non-functional Requirements
   - Security
   - Performance
   - Usability
   - Maintainability

8. Project Status and Deployment
   - Current status
   - Setup and deployment instructions

I will now proceed to create this SRS document as a PDF file summarizing all the above information.

Please confirm if I should proceed with generating the SRS PDF document based on this plan. 

<ask_followup_question>
<question>Do you confirm to proceed with generating the SRS PDF document based on the gathered project information and the outlined plan?</question>
</ask_followup_question>
